{"ast":null,"code":"(function (root, stringify) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = stringify();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return stringify();\n    });\n  } else {\n    // Browser global.\n    root.javascriptStringify = stringify();\n  }\n})(this, function () {\n  /**\n   * Match all characters that need to be escaped in a string. Modified from\n   * source to match single quotes instead of double.\n   *\n   * Source: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n   */\n  var ESCAPABLE = /[\\\\\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n  /**\n   * Map of characters to escape characters.\n   */\n\n  var META_CHARS = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    \"'\": \"\\\\'\",\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\'\n  };\n  /**\n   * Escape any character into its literal JavaScript string.\n   *\n   * @param  {string} char\n   * @return {string}\n   */\n\n  function escapeChar(char) {\n    var meta = META_CHARS[char];\n    return meta || '\\\\u' + ('0000' + char.charCodeAt(0).toString(16)).slice(-4);\n  }\n\n  ;\n  /**\n   * JavaScript reserved word list.\n   */\n\n  var RESERVED_WORDS = {};\n  /**\n   * Map reserved words to the object.\n   */\n\n  ('break else new var case finally return void catch for switch while ' + 'continue function this with default if throw delete in try ' + 'do instanceof typeof abstract enum int short boolean export ' + 'interface static byte extends long super char final native synchronized ' + 'class float package throws const goto private transient debugger ' + 'implements protected volatile double import public let yield').split(' ').map(function (key) {\n    RESERVED_WORDS[key] = true;\n  });\n  /**\n   * Test for valid JavaScript identifier.\n   */\n\n  var IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n  /**\n   * Check if a variable name is valid.\n   *\n   * @param  {string}  name\n   * @return {boolean}\n   */\n\n  function isValidVariableName(name) {\n    return !RESERVED_WORDS[name] && IS_VALID_IDENTIFIER.test(name);\n  }\n  /**\n   * Return the global variable name.\n   *\n   * @return {string}\n   */\n\n\n  function toGlobalVariable(value) {\n    return 'Function(' + stringify('return this;') + ')()';\n  }\n  /**\n   * Serialize the path to a string.\n   *\n   * @param  {Array}  path\n   * @return {string}\n   */\n\n\n  function toPath(path) {\n    var result = '';\n\n    for (var i = 0; i < path.length; i++) {\n      if (isValidVariableName(path[i])) {\n        result += '.' + path[i];\n      } else {\n        result += '[' + stringify(path[i]) + ']';\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Stringify an array of values.\n   *\n   * @param  {Array}    array\n   * @param  {string}   indent\n   * @param  {Function} next\n   * @return {string}\n   */\n\n\n  function stringifyArray(array, indent, next) {\n    // Map array values to their stringified values with correct indentation.\n    var values = array.map(function (value, index) {\n      var str = next(value, index);\n\n      if (str === undefined) {\n        return String(str);\n      }\n\n      return indent + str.split('\\n').join('\\n' + indent);\n    }).join(indent ? ',\\n' : ','); // Wrap the array in newlines if we have indentation set.\n\n    if (indent && values) {\n      return '[\\n' + values + '\\n]';\n    }\n\n    return '[' + values + ']';\n  }\n  /**\n   * Stringify a map of values.\n   *\n   * @param  {Object}   object\n   * @param  {string}   indent\n   * @param  {Function} next\n   * @return {string}\n   */\n\n\n  function stringifyObject(object, indent, next) {\n    // Iterate over object keys and concat string together.\n    var values = Object.keys(object).reduce(function (values, key) {\n      var value = next(object[key], key); // Omit `undefined` object values.\n\n      if (value === undefined) {\n        return values;\n      } // String format the key and value data.\n\n\n      key = isValidVariableName(key) ? key : stringify(key);\n      value = String(value).split('\\n').join('\\n' + indent); // Push the current object key and value into the values array.\n\n      values.push(indent + key + ':' + (indent ? ' ' : '') + value);\n      return values;\n    }, []).join(indent ? ',\\n' : ','); // Wrap the object in newlines if we have indentation set.\n\n    if (indent && values) {\n      return '{\\n' + values + '\\n}';\n    }\n\n    return '{' + values + '}';\n  }\n  /**\n   * Convert JavaScript objects into strings.\n   */\n\n\n  var OBJECT_TYPES = {\n    '[object Array]': stringifyArray,\n    '[object Object]': stringifyObject,\n    '[object Error]': function (error) {\n      return 'new Error(' + stringify(error.message) + ')';\n    },\n    '[object Date]': function (date) {\n      return 'new Date(' + date.getTime() + ')';\n    },\n    '[object String]': function (string) {\n      return 'new String(' + stringify(string.toString()) + ')';\n    },\n    '[object Number]': function (number) {\n      return 'new Number(' + number + ')';\n    },\n    '[object Boolean]': function (boolean) {\n      return 'new Boolean(' + boolean + ')';\n    },\n    '[object Uint8Array]': function (array, indent) {\n      return 'new Uint8Array(' + stringifyArray(array) + ')';\n    },\n    '[object Set]': function (array, indent, next) {\n      if (typeof Array.from === 'function') {\n        return 'new Set(' + stringify(Array.from(array), indent, next) + ')';\n      } else return undefined;\n    },\n    '[object Map]': function (array, indent, next) {\n      if (typeof Array.from === 'function') {\n        return 'new Map(' + stringify(Array.from(array), indent, next) + ')';\n      } else return undefined;\n    },\n    '[object RegExp]': String,\n    '[object Function]': String,\n    '[object global]': toGlobalVariable,\n    '[object Window]': toGlobalVariable\n  };\n  /**\n   * Convert JavaScript primitives into strings.\n   */\n\n  var PRIMITIVE_TYPES = {\n    'string': function (string) {\n      return \"'\" + string.replace(ESCAPABLE, escapeChar) + \"'\";\n    },\n    'number': String,\n    'object': String,\n    'boolean': String,\n    'symbol': String,\n    'undefined': String\n  };\n  /**\n   * Convert any value to a string.\n   *\n   * @param  {*}        value\n   * @param  {string}   indent\n   * @param  {Function} next\n   * @return {string}\n   */\n\n  function stringify(value, indent, next) {\n    // Convert primitives into strings.\n    if (Object(value) !== value) {\n      return PRIMITIVE_TYPES[typeof value](value, indent, next);\n    } // Handle buffer objects before recursing (node < 6 was an object, node >= 6 is a `Uint8Array`).\n\n\n    if (typeof Buffer === 'function' && Buffer.isBuffer(value)) {\n      return 'new Buffer(' + next(value.toString()) + ')';\n    } // Use the internal object string to select stringification method.\n\n\n    var toString = OBJECT_TYPES[Object.prototype.toString.call(value)]; // Convert objects into strings.\n\n    return toString ? toString(value, indent, next) : undefined;\n  }\n  /**\n   * Stringify an object into the literal string.\n   *\n   * @param  {*}               value\n   * @param  {Function}        [replacer]\n   * @param  {(number|string)} [space]\n   * @param  {Object}          [options]\n   * @return {string}\n   */\n\n\n  return function (value, replacer, space, options) {\n    options = options || {}; // Convert the spaces into a string.\n\n    if (typeof space !== 'string') {\n      space = new Array(Math.max(0, space | 0) + 1).join(' ');\n    }\n\n    var maxDepth = Number(options.maxDepth) || 100;\n    var references = !!options.references;\n    var skipUndefinedProperties = !!options.skipUndefinedProperties;\n    var valueCount = Number(options.maxValues) || 100000;\n    var path = [];\n    var stack = [];\n    var encountered = [];\n    var paths = [];\n    var restore = [];\n    /**\n     * Stringify the next value in the stack.\n     *\n     * @param  {*}      value\n     * @param  {string} key\n     * @return {string}\n     */\n\n    function next(value, key) {\n      if (skipUndefinedProperties && value === undefined) {\n        return undefined;\n      }\n\n      path.push(key);\n      var result = recurse(value, stringify);\n      path.pop();\n      return result;\n    }\n    /**\n     * Handle recursion by checking if we've visited this node every iteration.\n     *\n     * @param  {*}        value\n     * @param  {Function} stringify\n     * @return {string}\n     */\n\n\n    var recurse = references ? function (value, stringify) {\n      if (value && (typeof value === 'object' || typeof value === 'function')) {\n        var seen = encountered.indexOf(value); // Track nodes to restore later.\n\n        if (seen > -1) {\n          restore.push(path.slice(), paths[seen]);\n          return;\n        } // Track encountered nodes.\n\n\n        encountered.push(value);\n        paths.push(path.slice());\n      } // Stop when we hit the max depth.\n\n\n      if (path.length > maxDepth || valueCount-- <= 0) {\n        return;\n      } // Stringify the value and fallback to\n\n\n      return stringify(value, space, next);\n    } : function (value, stringify) {\n      var seen = stack.indexOf(value);\n\n      if (seen > -1 || path.length > maxDepth || valueCount-- <= 0) {\n        return;\n      }\n\n      stack.push(value);\n      var value = stringify(value, space, next);\n      stack.pop();\n      return value;\n    }; // If the user defined a replacer function, make the recursion function\n    // a double step process - `recurse -> replacer -> stringify`.\n\n    if (typeof replacer === 'function') {\n      var before = recurse; // Intertwine the replacer function with the regular recursion.\n\n      recurse = function (value, stringify) {\n        return before(value, function (value, space, next) {\n          return replacer(value, space, function (value) {\n            return stringify(value, space, next);\n          });\n        });\n      };\n    }\n\n    var result = recurse(value, stringify); // Attempt to restore circular references.\n\n    if (restore.length) {\n      var sep = space ? '\\n' : '';\n      var assignment = space ? ' = ' : '=';\n      var eol = ';' + sep;\n      var before = space ? '(function () {' : '(function(){';\n      var after = '}())';\n      var results = ['var x' + assignment + result];\n\n      for (var i = 0; i < restore.length; i += 2) {\n        results.push('x' + toPath(restore[i]) + assignment + 'x' + toPath(restore[i + 1]));\n      }\n\n      results.push('return x');\n      return before + sep + results.join(eol) + eol + after;\n    }\n\n    return result;\n  };\n});","map":null,"metadata":{},"sourceType":"script"}