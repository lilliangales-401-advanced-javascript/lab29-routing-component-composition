{"ast":null,"code":"export function walk(ast, {\n  enter,\n  leave\n}) {\n  visit(ast, null, enter, leave);\n}\nlet shouldSkip = false;\nconst context = {\n  skip: () => shouldSkip = true\n};\nexport const childKeys = {};\nconst toString = Object.prototype.toString;\n\nfunction isArray(thing) {\n  return toString.call(thing) === '[object Array]';\n}\n\nfunction visit(node, parent, enter, leave, prop, index) {\n  if (!node) return;\n\n  if (enter) {\n    const _shouldSkip = shouldSkip;\n    shouldSkip = false;\n    enter.call(context, node, parent, prop, index);\n    const skipped = shouldSkip;\n    shouldSkip = _shouldSkip;\n    if (skipped) return;\n  }\n\n  const keys = node.type && childKeys[node.type] || (childKeys[node.type] = Object.keys(node).filter(key => typeof node[key] === 'object'));\n\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    const value = node[key];\n\n    if (isArray(value)) {\n      for (let j = 0; j < value.length; j += 1) {\n        value[j] && value[j].type && visit(value[j], node, enter, leave, key, j);\n      }\n    } else if (value && value.type) {\n      visit(value, node, enter, leave, key, null);\n    }\n  }\n\n  if (leave) {\n    leave(node, parent, prop, index);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}